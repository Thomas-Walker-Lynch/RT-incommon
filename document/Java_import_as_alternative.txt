Java has long been criticized for its lack of support for `import as`, despite
years of requests and proposals.

The Java platform’s approach to aliasing issues relies on using fully qualified
names, which poses challenges given the length of package names, especially when
they include reversed domain names.

Because `Mosaic` is used to help with testing and is not part of the project
being tested, when aliasing conflicts arise, it is typically the `Mosaic` identifiers
that need to be fully qualified. Such a renamed identifier can exceed 34
characters!

One proposal to get around this was to use an `In` class where the members were
class extensions of imported classes.  Then all imports would have the prefix `In.`.
However, this did not work out because constructors are not
inherited, and Java’s restrictions on `final` classes prevent the use of
`LocalClass extends ImportClass {}` to give no names to classes.

Another proposal was to use the `alias` project on GitHub, which offers an XML-based
approach to aliasing. However, it introduces complexities, as it requires XML
configurations to be supplied to the compiler, adding setup overhead. Perhaps
another tool could create these.

We studied a preprocessing proposal where `import as` statements would be
replaced with fully qualified names before compilation. However, this approach
changes the tool flow for users and would require additional steps to ensure
`jdb` points to the original source files rather than intermediate files, which
complicates debugging. For both this proposal and the prior, we wanted to avoid
joining the world of java tool development.

So we have a simple solution, it is not ideal, but it is not bad.  We prefix
the string `Mosaic_` to the front of all the class names in the Mosaic library.
As a shop we are adopting this convention for all packaged java code.
