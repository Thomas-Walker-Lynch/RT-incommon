#!/bin/bash
# this will start a new shell that has an environment appropriate for the repo
#set -x
# current `use_tool` in the project environment also sets $PROJECT, and it comes later.


repo="${1%/}"

error=false
if [ -z "$repo" ]; then
   echo "no repo specified"
   error=true
fi
if [ -z "$REPO_DIR" ]; then
   echo "no REPO_DIR in the environment"
   error=true
fi
if $error; then
  exit 1
fi


# makes an init file for bash. 
# Variables from the environment will not expand within this heredoc because of the quotes around the EOF.  (Yes, that is
# a thing.)
# moved this to the .bashrc:
#   export PS1='\n$(/usr/local/bin/Z) [$(echo "$REPO")]\n\u@\h§\w§\n> '
read -r -d '' InitFile <<-"EOF" 
  export HOME=$(/usr/local/bin/home)
  . "$HOME/.bashrc"
  export HOME=$(/usr/local/bin/home) # make sure it wasn't changed in .bashrc
  export SHELL=/bin/bash
  export USERNAME=$(/usr/local/bin/user)
  export REPO_HOME="$REPO_DIR/$REPO" 
  if [ -z "$TMP" ] && [ -d "$REPO_HOME/developer" ]; then 
    export TMP="$REPO_HOME/developer/scratch_pad"
    if [ ! -d "$TMP" ]; then 
      mkdir "$TMP"
    fi
  fi
  cd "$REPO_HOME"
  act="$REPO_HOME/developer/tool/env"
  if [ -f "$act" ]; then
    . "$act"
  fi
  # echo $PATH
EOF

# exec -c and env -i, where INSIDE_EMACS is set in the calling shell and is also set in
# the init script of the newly launched shell, does not work.  In both cases emacs stops
# tracking directory changes in the newly launched shell.  Emacs will continue to track
# directory changes if we call bash directly, or if we use env -i with INSIDE_EMACS defined
# as a parameter.
#
# PROJECT is for PS1 bash prompt
env --ignore-environment \
    REPO="$repo" \
    REPO_DIR="$REPO_DIR" \
    SUBU_SHARE_DIR="$SUBU_SHARE_DIR"\
    PROJECT="$repo"\
    INSIDE_EMACS="$INSIDE_EMACS" \
    TMP="$TMP" \
    HOSTNAME="$HOSTNAME" \
    LOGNAME="$LOGNAME" \
    DISPLAY="$DISPLAY" \
    LANG="$LANG"\
    TERM="$TERM" \
    TERMCAP="$TERMCAP" \
    EDITOR="$EDITOR" \
    PATH="/usr/local/bin:/usr/bin:/bin" \
    /bin/bash --init-file <(echo "$InitFile")

#set +x
