#--------------------------------------------------------------------------------
# This makefile must be called through a local makefile rather than directly.
# the local make file should include:
#
#  1. cp $(RESOURCE)/release/make/makefile-environment_example to get started on a make environment.
#  2. modify it and set the variables to custom values
#  3. the environment file should include this file, probably at $(RESOURCE)/release/make/makefile
#  4. if tailored targets are needed, add them 
#

#--------------------------------------------------------------------------------
# todo ...

# should add test that incdir is not pwd before deleting the include
# file. Currently it is working for us despite this problem because dist-clean is
# looking for $(module).h while the include file is always $(module).lib.h.

#--------------------------------------------------------------------------------
# files named by convention
#   this implements the .lib.c  and the .cli.c convention
#

# these are the sources edited by the programmer
C_SOURCE_LIB=  $(wildcard $(SRCDIR)/*.lib.c)
C_SOURCE_EXEC=  $(wildcard $(SRCDIR)/*.cli.c)
CPP_SOURCE_LIB= $(wildcard $(SRCDIR)/*.lib.cc)
CPP_SOURCE_EXEC= $(wildcard $(SRCDIR)/*.cli.cc)

#remove the suffix to get base name
C_BASE_LIB=  $(sort $(patsubst %.lib.c,  %, $(notdir $(C_SOURCE_LIB))))
C_BASE_EXEC=  $(sort $(patsubst %.cli.c,  %, $(notdir $(C_SOURCE_EXEC))))
CPP_BASE_LIB= $(sort $(patsubst %.lib.cc, %, $(notdir $(CPP_SOURCE_LIB))))
CPP_BASE_EXEC= $(sort $(patsubst %.cli.cc, %, $(notdir $(CPP_SOURCE_EXEC))))

# two sets of object files, one for the lib, and one for the command line interface progs
OBJECT_LIB= $(patsubst %, $(TMPDIR)/%.lib.o, $(C_BASE_LIB) $(CPP_BASE_LIB))
OBJECT_EXEC= $(patsubst %, $(TMPDIR)/%.cli.o, $(C_BASE_EXEC) $(CPP_BASE_EXEC))

# executables are made from EXEC sources
EXEC= $(patsubst %, $(EXECDIR)/%, $(C_BASE_EXEC) $(CPP_BASE_EXEC))


#--------------------------------------------------------------------------------
# targets

.PHONY: all
all: usage

.PHONY: usage
usage:
	@echo example usage: make dist-clean dependency cli
	@echo example usage: make cli

.PHONY: version
version:
	@echo makefile version 7.1
	if [ ! -z "$(C)" ]; then $(C) -v; fi
	if [ ! -z "$(CPP)" ]; then $(CPP) -v; fi
	/bin/make -v

.PHONY: info
info:
	@echo "C: " $(C)
	@echo "CPP: " $(CPP)
	@echo "CPPFLAGS: " $(CPPFLAGS)
	@echo "CPP_BASE_EXEC: " $(CPP_BASE_EXEC)
	@echo "CPP_BASE_LIB: " $(CPP_BASE_LIB)
	@echo "CPP_SOURCE_EXEC: " $(CPP_SOURCE_EXEC)
	@echo "CPP_SOURCE_LIB: " $(CPP_SOURCE_LIB)
	@echo "CFLAGS: " $(CFLAGS)
	@echo "C_BASE_EXEC: " $(C_BASE_EXEC)
	@echo "C_BASE_LIB: " $(C_BASE_LIB)
	@echo "C_SOURCE_EXEC: " $(C_SOURCE_EXEC)
	@echo "C_SOURCE_LIB: " $(C_SOURCE_LIB)
	@echo "DEPFILE: " $(DEPFILE)
	@echo "DOCDIR: " $(DOCDIR)
	@echo "ECHO: " $(ECHO)
	@echo "EXEC: " $(EXEC)
	@echo "EXECDIR: " $(EXECDIR)
	@echo "INCDIR: " $(INCFILE)
	@echo "LIBDIR: " $(LIBDIR)
	@echo "LIBFILE: " $(LIBFILE)
	@echo "LINKFLAGS: " $(LINKFLAGS)
	@echo "OBJECT_EXEC: " $(OBJECT_EXEC)
	@echo "OBJECT_LIB: " $(OBJECT_LIB)
	@echo "SHELL: " $(SHELL)
	@echo "SRCDIR: " $(INCFILE)
	@echo "TESTDIR: " $(TESTDIR)
	@echo "TMPDIR: " $(TMPDIR)
	@echo "TRYDIR: " $(TRYDIR)

# should be safe to run this in an already setup or partially setup directory
# gee looks like a candidate for a makefile function ..
.PHONY: setup
setup:
	[ ! -e $(DOCDIR)  ]  && mkdir $(DOCDIR)  || true
	[ ! -e $(EXECDIR) ]  && mkdir $(EXECDIR) || true
	[ ! -e $(LIBDIR)  ]  && mkdir $(LIBDIR)  || true
	[ ! -e $(SRCDIR)  ]  && mkdir $(SRCDIR)  || true
	[ ! -e $(TESTDIR) ]  && mkdir $(TESTDIR) || true
	[ ! -e $(TMPDIR)  ]  && mkdir $(TMPDIR)  || true
	[ ! -e $(TRYDIR)  ]  && mkdir $(TRYDIR)  || true

.PHONY: dependency
dependency:
	@rm -f $(DEPFILE)
	@if [ -z "$(CPP)" ]; then\
	  if [ -z "$(C)" ]; then\
	    $(ECHO) "No compiler specified";\
	    exit 1;\
	  else\
	    echo "C compiler only deps" ;\
	    $(C) $(CFLAGS) -MM  $(C_SOURCE_LIB) $(C_SOURCE_EXEC) | sed 's|^.*\.o|$(TMPDIR)/&|' >> $(DEPFILE);\
	    echo "deps for C linking";\
	    for i in $(C_BASE_EXEC); do\
	      $(ECHO) >> $(DEPFILE);\
	      $(ECHO) "$(EXECDIR)/$$i : $(TMPDIR)/$$i.cli.o $(LIBFILE)" >> $(DEPFILE);\
	      $(ECHO) "	$(C) -o $(EXECDIR)/$$i $(TMPDIR)/$$i.cli.o $(LINKFLAGS)" >> $(DEPFILE);\
	    done;\
	  fi;\
	else\
	  $(CPP) $(CPPFLAGS) -MM  $(CPP_SOURCE_LIB) $(CPP_SOURCE_EXEC) | sed 's|^.*\.o|$(TMPDIR)/&|' >> $(DEPFILE);\
	  if [ -z "$C()" ]; then\
	    echo "CPP compiler only deps" ;\
	  else\
	    echo "CPP and C mixed compile deps" ;\
	    $(C) $(CFLAGS) -MM   $(C_SOURCE_LIB) $(C_SOURCE_EXEC) | sed 's|^.*\.o|$(TMPDIR)/&|' >> $(DEPFILE);\
	  fi;\
	  echo "deps for CPP linking";\
	  for i in $(CPP_BASE_EXEC) $(C_BASE_EXEC) ; do\
	    $(ECHO) >> $(DEPFILE);\
	    $(ECHO) "$(EXECDIR)/$$i : $(TMPDIR)/$$i.cli.o $(LIBFILE)" >> $(DEPFILE);\
	    $(ECHO) "	$(CPP) -o $(EXECDIR)/$$i $(TMPDIR)/$$i.cli.o $(LINKFLAGS)" >> $(DEPFILE);\
	  done;\
	fi

.PHONY: library
library: $(LIBFILE)

$(LIBFILE): $(OBJECT_LIB)
	ar rcs $(LIBFILE) $(OBJECT_LIB)

.PHONY: cli
cli: $(LIBFILE)
	make sub_cli

.PHONY: sub_cli
sub_cli: $(EXEC)

.PHONY: share
share:
	if [ ! -z "$(wildcard $(LIBDIR)/*)" ]; then cp $(LIBDIR)/* $(DIST_TARGET)/$(LIBDIR); fi
	if [ ! -z "$(wildcard $(EXECDIR)/*)" ]; then cp $(EXECDIR)/* $(DIST_TARGET)/$(EXECDIR); fi
#	if [ ! -z "$(wildcard $(SRCDIR)/*.h)" ]; then cp $(SRCDIR)/*.h $(DIST_TARGET)/include; fi


.PHONY: clean
clean:
	rm -f $(DEPFILE)
	rm -f $(LIBFILE)
	for i in $(wildcard $(TMPDIR)/*.o); do rm $$i || true; done 

.PHONY: dist-clean
dist-clean: clean
	for i in $(EXEC); do [ -e $$i ] && rm $$i || true; done 

# recipes
 $(TMPDIR)/%.o : $(SRCDIR)/%.c
	$(C) $(CFLAGS) -o $@ -c $<

 $(TMPDIR)/%.o : $(SRCDIR)/%.cc
	$(CPP) $(CPPFLAGS) -o $@ -c $<

