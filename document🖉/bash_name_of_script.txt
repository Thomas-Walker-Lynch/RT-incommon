
Bash is inconsistent about returning the name of the running script in
all scenarios (sourced, executed directly, from with in a function called
by another function).

1.

BASH_SOURCE[0] was used because $0 did not work with sourced scripts (a
fact that is leveraged for detecting when in a sourced script).

2.

However, this did not work in all scenarios:

  read -r -d '' script_afp_string <<'EOF'
  realpath "${BASH_SOURCE[0]}" 2>/dev/null
  EOF

    script_afp(){
      eval "$script_afp_string"
    }

  export script_afp_string
  export -f script_afp

When `script_afp` was exported, used in another file, and used within a function
in that other file, it reported `environment` for the script name at
BASH_SOURCE[0].  In various call scenarios the actual script name appears at
BASH_SOURCE[1] or even at BASH_SOURCE[2].  

3.

As a stable alternative to having a script_afp function, place this line
at the top of scripts that use the `script_XX` functions, or at the top
of all scripts:

  script_afp=realpath "${BASH_SOURCE[0]}"

Then use $script_afp as a string within other functions. It will have stable
value no matter the call structure.
